; By default, testenvs are configured to:
; - don't skip dist (skipsdist = False)
; - don't skip the package installation (skip_install = False)
; - don't use source installation (usedevelop = False)
; where one of those steps is not necessary for the test,
; we set the associated flag (e.g. for linting we don't need
; the package installation).
[tox]
envlist = bandit, safety, black, black-check, isort, isort-check, fix-copyright, check-copyright, hash-check, docs, flake8, liccheck, mypy, pylint, vulture, {plugins-,}py{3.10,3.10-cov,3.11}, dependencies-check, package-version-checks, lock-packages, package-dependencies-checks, plugins_deps, fix-doc-hashes, check-doc-links-hashes, check-generate-all-protocols, spell-check, generate-api-documentation
; when running locally we don't want to fail for no good reason
skip_missing_interpreters = true

[packages-deps]
deps =
    gym==0.15.6
    aiohttp<4.0.0,>=3.8.5
    gym==0.15.6
    hypothesis==6.21.6
    numpy>=1.18.1
    openapi-core==0.15.0
    openapi-spec-validator<0.5.0,>=0.4.0
    asn1crypto<1.5.0,>=1.4.0
    tomte[tests]==0.4.0

[tests-common]
deps =
    {[packages-deps]deps}
    docker==4.2.0
    pexpect==4.8.0
    GitPython<4.0.0,>=3.1.37
    packaging<24.0,>=23.1
    py-multibase>=1.0.0
    py-multicodec>=0.2.0
    protobuf<4.25.0,>=4.21.6
    requests==2.28.1
    mistune==2.0.3
    tomte[isort]==0.4.0
    tomte[black]==0.4.0
    tomte[tests]==0.4.0
    ; Plugin dependencies. We need this
    ; because we use --no-deps to install the plugins.
    ; aea_ledger_cosmos/aea_ledger_fetchai
    ecdsa>=0.15
    asn1crypto<1.5.0,>=1.4.0
    bech32==1.2.0
    ; aea_ledger_ethereum
    web3<8,>=7.0.0
    ipfshttpclient==0.8.0a2
    eth-account>=0.13.0,<0.14.0
    ; for password encryption in cosmos
    pycryptodome>=3.10.1
    cosmpy==0.9.2
    certifi<=2022.6.15.1
    google-api-python-client<=2.60.0
    idna<=3.3
    numpy>=1.18.1
    psutil==5.7.0
    setuptools==59.6.0
    ledgerwallet==0.1.3
    construct<=2.10.61
    defusedxml==0.6.0
    semver<3.0.0,>=2.9.1

[extra-deps]
deps =
    memory-profiler==0.57.0
    multidict
    pytest-asyncio
    werkzeug
; end-extra

[testenv]
basepython = python3.10
whitelist_externals = /bin/sh
passenv = *
extras = all
deps =
    setuptools==59.6.0

[commands-local-install]
commands =
    pip install {toxinidir}[all]
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-ethereum
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-cosmos
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-fetchai
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-cli-ipfs


[test-framework]
deps =
    {[tests-common]deps}
commands =
    ; for some reason tox installs aea without respect to the dependencies version specified in seetup.py. at least in CI env
    ; so install current aea in a normal way
    {[commands-local-install]commands}
    pytest -rfE --doctest-modules aea tests/ --durations=0 --cov=aea --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov-config=.coveragerc --cov-append {posargs}

[test-packages]
deps =
    {[tests-common]deps}
commands =
    ; for some reason tox installs aea without respect to the dependencies version specified in setup.py. at least in CI env
    ; so install current aea in a normal way
    {[commands-local-install]commands}
    aea test --cov --append packages --durations=0 {posargs}

[test-plugins]
deps =
    {[tests-common]deps}
    pytest-custom-exit-code==0.3.0
    hexbytes==1.3.1
commands =
    {[commands-local-install]commands}
    pytest -rfE plugins/aea-ledger-fetchai/tests --durations=0 --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov=aea_ledger_fetchai --cov-config=.coveragerc --suppress-no-test-exit-code --cov-append {posargs}
    pytest -rfE plugins/aea-ledger-ethereum/tests --durations=0 --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov=aea_ledger_ethereum --cov-config=.coveragerc --suppress-no-test-exit-code --cov-append {posargs}
    pytest -rfE plugins/aea-ledger-cosmos/tests --durations=0 --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov=aea_ledger_cosmos --cov-config=.coveragerc --suppress-no-test-exit-code --cov-append {posargs}
    pytest -rfE plugins/aea-cli-ipfs/tests --durations=0 --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov=aea_cli_ipfs --cov-config=.coveragerc --suppress-no-test-exit-code --cov-append {posargs}

    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-ethereum-hwi
    pytest -rfE plugins/aea-ledger-ethereum-hwi/tests --durations=0 --cov-report=html --cov-report=xml --cov-report=term --cov-report=term-missing --cov=aea_ledger_ethereum_hwi --cov-config=.coveragerc --suppress-no-test-exit-code --cov-append {posargs}

[testenv:py3.10]
basepython = python3.10
usedevelop = True
deps = {[test-framework]deps}
commands = {[test-framework]commands}

[testenv:packages-py3.10]
basepython = python3.10
deps = {[test-packages]deps}
commands = {[test-packages]commands}

[testenv:plugins-py3.10]
basepython = python3.10
usedevelop = True
deps = {[test-plugins]deps}
commands = {[test-plugins]commands}
; Since the ledgerwallet still uses protobufs compiled using protoc<=3.20
setenv =
    PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python

[testenv:py3.11]
basepython = python3.11
usedevelop = True
deps = {[test-framework]deps}
commands = {[test-framework]commands}

[testenv:packages-py3.11]
basepython = python3.11
deps = {[test-packages]deps}
commands = {[test-packages]commands}

[testenv:plugins-py3.11]
basepython = python3.11
usedevelop = True
deps = {[test-plugins]deps}
commands = {[test-plugins]commands}
; Since the ledgerwallet still uses protobufs compiled using protoc<=3.20
setenv =
    PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python

[testenv:bandit]
skipsdist = True
skip_install = True
deps =
    tomte[bandit]==0.4.0
commands = bandit -r aea benchmark examples \
           plugins/aea-ledger-fetchai/aea_ledger_fetchai \
           plugins/aea-ledger-ethereum/aea_ledger_ethereum \
           plugins/aea-ledger-ethereum-flashbots/aea-ledger-ethereum-flashbots \
           plugins/aea-ledger-cosmos/aea_ledger_cosmos \
           plugins/aea-ledger-solana/aea_ledger_solana \
           plugins/aea-cli-ipfs/aea_cli_ipfs
           bandit -s B101 -r packages
           bandit -s B101 -r tests scripts

[testenv:black]
skipsdist = True
skip_install = True
deps =
    tomte[black]==0.4.0
commands = black aea benchmark examples packages plugins scripts tests --exclude ".*_pb2.py"

[testenv:black-check]
skipsdist = True
skip_install = True
deps =
    tomte[black]==0.4.0
commands =black aea benchmark examples packages plugins scripts tests --check --verbose --exclude ".*_pb2.py"

[testenv:isort]
skipsdist = True
skip_install = True
deps =
    tomte[isort]==0.4.0
commands = isort aea benchmark examples packages plugins scripts tests

[testenv:isort-check]
skipsdist = True
skip_install = True
deps =
    tomte[isort]==0.4.0
commands = isort --check-only --verbose aea benchmark examples packages plugins scripts tests

[testenv:fix-copyright]
skipsdist = True
skip_install = True
deps =
commands = {toxinidir}/scripts/check_copyright_notice.py

[testenv:check-copyright]
skipsdist = True
skip_install = True
allowlist_externals = {toxinidir}/scripts/check_copyright_notice.py
deps =
commands = {toxinidir}/scripts/check_copyright_notice.py --check


[testenv:hash-check]
skipsdist = True
usedevelop = True
commands =
    pip install {toxinidir}[all]
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-cli-ipfs
    aea packages lock --check
    aea --registry-path=./tests/data/packages packages lock --check

[testenv:lock-packages]
skipsdist = True
usedevelop = True
commands =
    pip install {toxinidir}[all]
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-cli-ipfs
    aea packages lock
    aea --registry-path=./tests/data/packages packages lock
    python {toxinidir}/scripts/check_doc_ipfs_hashes.py --fix

[testenv:package-version-checks]
skipsdist = True
usedevelop = True
deps =
commands = {toxinidir}/scripts/check_package_versions_in_docs.py

[testenv:package-dependencies-checks]
skipsdist = True
usedevelop = True
deps =
    {[testenv]deps}
    {[packages-deps]deps}
commands =
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-ethereum
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-ethereum-flashbots
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-cosmos
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-fetchai
    python -m aea.cli check-packages

[testenv:docs]
skipsdist = True
skip_install = True
deps =
    tomte[docs]==0.4.0
commands = pip3 install git+https://github.com/pugong/mkdocs-mermaid-plugin.git@abf1439#egg=mkdocs-mermaid-plugin
           mkdocs build --clean

[testenv:docs-serve]
skipsdist = True
skip_install = True
deps =
    tomte[docs]==0.4.0
commands = pip3 install git+https://github.com/pugong/mkdocs-mermaid-plugin.git@abf1439#egg=mkdocs-mermaid-plugin
           mkdocs build --clean
           python -c 'print("###### Starting local server. Press Control+C to stop server ######")'
           mkdocs serve -a localhost:8080

[testenv:flake8]
skipsdist = True
skip_install = True
deps =
    tomte[flake8]==0.4.0
commands = flake8 aea benchmark examples packages plugins scripts tests

[testenv:liccheck]
skipsdist = True
usedevelop = True
deps =
    liccheck==0.6.0
commands = {toxinidir}/scripts/freeze_dependencies.py -o {envtmpdir}/requirements.txt
           liccheck -s strategy.ini -r {envtmpdir}/requirements.txt -l PARANOID

[testenv:mypy]
skipsdist = True
skip_install = True
deps =
    tomte[mypy]==0.4.0
commands = mypy aea packages --disallow-untyped-defs
           mypy benchmark examples --disallow-untyped-defs
           mypy scripts tests plugins/aea-ledger-fetchai/aea_ledger_fetchai plugins/aea-ledger-ethereum/aea_ledger_ethereum plugins/aea-ledger-ethereum-flashbots/aea_ledger_ethereum_flashbots plugins/aea-ledger-cosmos/aea_ledger_cosmos plugins/aea-cli-ipfs/aea_cli_ipfs

[testenv:pylint]
whitelist_externals =
    /bin/sh
    /usr/bin/sh
skipsdist = True
deps =
    tomte[pylint]==0.4.0
commands =
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-ethereum
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-ethereum-flashbots
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-cosmos
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-fetchai
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-ledger-solana
    python -m pip install --no-deps file://{toxinidir}/plugins/aea-cli-ipfs
    sh -c "pylint aea benchmark packages plugins/aea-ledger-fetchai/aea_ledger_fetchai plugins/aea-ledger-ethereum/aea_ledger_ethereum plugins/aea-ledger-ethereum-flashbots/aea_ledger_ethereum_flashbots plugins/aea-ledger-cosmos/aea_ledger_cosmos plugins/aea-cli-ipfs/aea_cli_ipfs scripts examples/*"

[testenv:safety]
skipsdist = True
skip_install = True
deps =
    tomte[safety]==0.4.0
commands = safety check -i 37524 -i 38038 -i 37776 -i 38039 -i 39621 -i 40291 -i 39706 -i 51358 -i 51499 -i 67599 -i 70612

[testenv:vulture]
skipsdist = True
skip_install = True
deps =
    tomte[vulture]==0.4.0
commands = vulture aea scripts/whitelist.py --exclude "*_pb2.py"

[testenv:darglint]
skipsdist = True
skip_install = True
deps =
    tomte[darglint]==0.4.0
commands = darglint aea benchmark examples libs packages plugins scripts

[testenv:fix-doc-hashes]
skipsdist = True
usedevelop = True
commands = {toxinidir}/scripts/generate_package_list.py
           {toxinidir}/scripts/check_doc_ipfs_hashes.py --fix

[testenv:check-doc-links-hashes]
skipsdist = True
usedevelop = True
allowlist_externals = {toxinidir}/scripts/check_doc_links.py
                      {toxinidir}/scripts/check_doc_ipfs_hashes.py
                      {toxinidir}/scripts/check_ipfs_hashes_pushed.py
commands = {toxinidir}/scripts/check_doc_links.py
           {toxinidir}/scripts/check_doc_ipfs_hashes.py
           {toxinidir}/scripts/check_ipfs_hashes_pushed.py


[testenv:generate-all-protocols]
skipsdist = True
usedevelop = True
deps =
    tomte[isort]==0.4.0
    tomte[black]==0.4.0
commands = pip install {toxinidir}[all]
           pip install --no-deps file://{toxinidir}/plugins/aea-cli-ipfs
           aea generate-all-protocols
           aea generate-all-protocols tests/data/packages

[testenv:check-generate-all-protocols]
skipsdist = True
usedevelop = True
deps =
    tomte[isort]==0.4.0
    tomte[black]==0.4.0
commands = pip install {toxinidir}[all]
           python -m pip install --no-deps file://{toxinidir}/plugins/aea-cli-ipfs
           aea generate-all-protocols --check-clean
           aea generate-all-protocols tests/data/packages --check-clean

[testenv:spell-check]
whitelist_externals = mdspell
skipsdist = True
usedevelop = True
deps =
commands = mdspell -r -n -a --en-gb '**/*.md' '!docker-images/*.md' '!docs/api/**/*.md' '!docs/package_list.md'

[testenv:dependencies-check]
skipsdist = True
skip_install = True
commands =
    pip install {toxinidir}[all]
    pip uninstall open-aea  -y
    {toxinidir}/scripts/check_imports_and_dependencies.py

[testenv:plugins_env]
skipsdist = True
skip_install = True
passenv = *
deps = .[all]
whitelist_externals = /bin/sh
commands =
    - /bin/sh -c "rm -fr ./*private_key.txt"
    {posargs}

[testenv_multi]
basepython = python3.10
whitelist_externals = /bin/sh
passenv = *
extras = all
deps = {[tests-common]deps}

[testenv:check-api-docs]
skipsdist = True
usedevelop = True
deps =
    tomte[docs]==0.4.0
    docspec==2.2.1
    docspec-python==2.2.1
commands = {toxinidir}/scripts/generate_api_docs.py --check-clean

[testenv:generate-api-documentation]
skipsdist = True
usedevelop = True
deps =
    tomte[docs]==0.4.0
    docspec==2.2.1
    docspec-python==2.2.1
commands = {toxinidir}/scripts/generate_api_docs.py

[testenv:update-dependencies]
deps =
    toml==0.10.2
commands = {toxinidir}/scripts/check_dependencies.py

[testenv:check-dependencies]
deps =
    toml==0.10.2
commands = {toxinidir}/scripts/check_dependencies.py --check
